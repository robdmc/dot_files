from collections import Counter
from string import ascii_lowercase
from visidata import vd, BaseSheet, asyncthread, Sheet, Progress


vd.options.cmdlog_histfile = '/tmp/visidata_history.vd'
vd.options.disp_float_fmt = '{:04f}'
vd.options.disp_float_fmt = '%Y-%m-%dT%H:%M:%S'
vd.options.quitguard = True
vd.options.save_filetype = 'csv'
vd.options.histogram_bins = 30
vd.options.numeric_binning = True


class Ezr:
    def __init__(self):
        self.ezr = None

    def __getattr__(self, name):
        if self.ezr is None:
            import easier as ezr
            self.ezr = ezr
        return getattr(self.ezr, name)


def gen_normalize_names(names):
    seen = Counter()
    for name in ezr.slugify(names):
        seen.update({name: 1})
        num = seen[name]
        if num > 1:
            tag = ascii_lowercase[num - 2]
            name = f'{name}_{tag}'
        yield name


@Sheet.api
@asyncthread
def normalize_column_names(sheet):
    """
    Normalize the names of all non-hidden columns on the active sheet.
    """

    init_names = []
    gen = gen_normalize_names(c.name for c in sheet.visibleCols)
    prog = Progress(gen, gerund="normalizing", total=sheet.nVisibleCols)

    for i, norm_name in enumerate(prog):
        col = sheet.visibleCols[i]
        init_names.append(col.name)  # Store for undo
        col.name = norm_name

    @asyncthread
    def undo():
        for i, c in enumerate(init_names):
            sheet.visibleCols[i].name = c

    vd.addUndo(undo)


try:
    from dateutil.parser import parse
    import numpy as np
    ezr = Ezr()

except:  # noqa
    pass


def get_frame():

    import pandas as pd
    sheet = vd.sheet

    col_names = [c.name for c in sheet.visibleCols]

    data = []
    for typedvals in sheet.iterdispvals(format=False):
        nprow = []
        for col, val in typedvals.items():
            if isinstance(val, TypedWrapper):
                val = pd.NA
            elif col.type is date:
                val = np.datetime64(val.isoformat())
            nprow.append(val)
        data.append(tuple(nprow))

    df = pd.DataFrame(data, columns=col_names)
    return df


def gui_async():
    """
    Requires pandashells with gui tool be installed
    """
    import subprocess
    df = get_frame()
    p = subprocess.Popen(['p.gui'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    df.to_csv(p.stdin, index=False)
    p.stdin.close()


def gui_sync():
    """
    Does not require pandashells, but will block visidata ui
    """
    from pandasgui import show
    df = get_frame()
    show(df)


BaseSheet.addCommand('gG', 'pandasgui', 'gui_async()')
BaseSheet.addCommand('zG', 'pandasguisync', 'gui_sync()')
Sheet.addCommand(None, "slugify", "vd.sheet.normalize_column_names()")
