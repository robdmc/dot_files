from visidata import vd, BaseSheet, asyncthread
import visidata
import os
import datetime
from pathlib import Path


def set_log_file():
    now = datetime.datetime.now()
    timestamp_str = now.strftime('%Y-%m-%d-%H-%M-%S')
    pid = str(os.getpid())
    log_base_name = f'vd_{timestamp_str}_pid_{pid}.vd'

    log_dir = '/tmp/visidata_logs'
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, log_base_name)
    symlink_file = os.path.join(log_dir, 'latest.vd')
    previous_symlink_file = os.path.join(log_dir, 'previous.vd')
    Path(log_file).touch(exist_ok=True)

    if os.path.lexists(symlink_file):
        previous_real_path = Path(symlink_file).resolve()
        os.unlink(symlink_file)
        if os.path.lexists(previous_symlink_file):
            os.unlink(previous_symlink_file)
        os.symlink(previous_real_path, previous_symlink_file)
    os.symlink(log_file, symlink_file)

    os.unlink(log_file)
    vd.options.cmdlog_histfile = log_file


class Ezr:
    def __init__(self):
        self.ezr = None

    def __getattr__(self, name):
        if self.ezr is None:
            import easier as ezr
            self.ezr = ezr
        return getattr(self.ezr, name)


try:
    from dateutil.parser import parse
    import numpy as np
    ezr = Ezr()
    #set_log_file()

except:  # noqa
    pass
set_log_file()


def get_frame():

    import pandas as pd
    sheet = vd.sheet


    dtype = []
    col_names = [c.name for c in sheet.visibleCols]

    for col in Progress(sheet.visibleCols):
        if col.type in (int, vlen):
            dt = 'i8'
        elif col.type in (float, currency):
            dt = 'f8'
        elif col.type is date:
            dt = 'datetime64[s]'

        else: #  if col.type in (str, anytype):
            width = col.getMaxWidth(sheet.rows)
            dt = 'U'+str(width)
        dtype.append((col.name, dt))

    data = []
    for typedvals in sheet.iterdispvals(format=False):
        nprow = []
        for col, val in typedvals.items():
            if isinstance(val, TypedWrapper):
                if col.type is anytype:
                    val = ''
                else:
                    val = options.safe_error
            elif col.type is date:
                val = np.datetime64(val.isoformat())
            nprow.append(val)
        data.append(tuple(nprow))

    arr = np.array(data, dtype=dtype)

    df = pd.DataFrame(arr)
    return df


def gui_async():
    """
    Requires pandashells with gui tool be installed
    """
    import subprocess
    df = get_frame()
    p = subprocess.Popen(['p.gui'], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    df.to_csv(p.stdin, index=False)
    p.stdin.close()


def gui_sync():
    """
    Does not require pandashells, but will block visidata ui
    """
    from pandasgui import show
    df = get_frame()
    show(df)


BaseSheet.addCommand('gG', 'pandasgui', 'gui_async()')
BaseSheet.addCommand('zG', 'pandasguisync', 'gui_sync()')


